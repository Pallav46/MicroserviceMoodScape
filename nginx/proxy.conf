events {}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Timeout settings
    proxy_connect_timeout 120s;
    proxy_send_timeout 120s;
    proxy_read_timeout 120s;

    # Buffer settings
    proxy_buffer_size 16k;
    proxy_buffers 4 16k;
    proxy_busy_buffers_size 32k;

    # Upstream definitions (replace hostnames/ports with your actual service endpoints)
    upstream auth_service {
        server auth-server:8080;
    }

    upstream emotion_detection_service {
        server emotion-server:8000;
    }

    upstream user_service {
        server user-server:8050;
    }

    upstream song_service {
        server song-server:8010;
    }

    server {
        listen 80;

        # Direct access to auth service for testing (optional)
        location ^~ /verify-user {
            proxy_pass http://auth_service/verify;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Auth callback endpoint (if needed)
        location ^~ /auth/callback {
            proxy_pass http://auth_service/api/v1/auth/callback;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Emotion detection endpoint
        location ^~ /detect-emotion {
            auth_request /auth-verify;
            proxy_pass http://emotion_detection_service/detect-emotion;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
            proxy_set_header Authorization $http_authorization;            
            error_page 401 = @error401;
            error_page 400 = @error400; 
        }

        # User playlists endpoint
        location ^~ /user/api/playlists {
            auth_request /auth-verify;
            proxy_pass http://user_service/user/api/playlists;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
            proxy_set_header Authorization $http_authorization;            
            error_page 401 = @error401; 
            error_page 400 = @error400; 
        }

        # User history endpoint (forwarding captured X-User-Id)
        # User history endpoint (forwarding captured X-User-Id)
        location ^~ /user/api/history {
            auth_request /auth-verify;
            auth_request_set $user_id $upstream_http_x_user_id;
            
            proxy_pass http://user_service/user/api/history;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            # Forward the X-User-Id header captured from auth-verify
            proxy_set_header X-User-Id $user_id;
            
            error_page 401 = @error401;
            error_page 400 = @error400;
        }

        # User likes endpoint
        location ^~ /user/api/likes {
            auth_request /auth-verify; 
            proxy_pass http://user_service/user/api/likes; 
            proxy_set_header Host $host; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
            proxy_set_header Authorization $http_authorization; 
        }

        # Songs endpoint
        location ^~ /songs {
            auth_request /auth-verify; 
            proxy_pass http://song_service/songs; 
            proxy_set_header Host $host; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
            proxy_set_header Authorization $http_authorization; 
        }

        # Search endpoint
        location ^~ /search {
            auth_request /auth-verify; 
            proxy_pass http://song_service/search; 
            proxy_set_header Host $host; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
            proxy_set_header Authorization $http_authorization; 
        }

        # Internal auth-verify endpoint
        location /auth-verify {
            internal;
            proxy_pass http://auth_service/verify;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_pass_request_body off;
            
            # Important: Capture headers from the auth service response
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $auth_status $upstream_status;
        }

        # Custom error pages
        location @error401 {
           return 401 "Unauthorized: Access is denied due to invalid credentials.";    
        }
        
        location @error400 {
           return 400 "Bad Request: Invalid token format.";    
        }
        
        location @error502 {
           return 502 "Bad Gateway: The upstream server is unavailable.";
        }
        
        error_page 502 = @error502;
        error_page 401 = @error401; 
        error_page 400 = @error400; 
    }
}
